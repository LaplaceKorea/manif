<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4" kind="class" language="C++" prot="public">
    <compoundname>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</compoundname>
    <basecompoundref refid="structmanif_1_1_bundle_base" prot="public" virt="non-virtual">manif::BundleBase&lt; Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt; &gt;</basecompoundref>
    <includes refid="_bundle__map_8h" local="no">Bundle_map.h</includes>
    <templateparamlist>
      <param>
        <type>class _Scalar</type>
      </param>
      <param>
        <type>template&lt; typename &gt; class ...</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4_1a9d2a5fd2536440756ff792d576fc6909" prot="private" static="no">
        <type><ref refid="structmanif_1_1_bundle_base" kindref="compound">manif::BundleBase</ref>&lt; Map&lt; const <ref refid="structmanif_1_1_bundle" kindref="compound">manif::Bundle</ref>&lt; _Scalar, T... &gt;, 0 &gt; &gt;</type>
        <definition>using Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;::Base =  manif::BundleBase&lt;Map&lt;const manif::Bundle&lt;_Scalar, T...&gt;, 0&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" line="77" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4_1abefdb0ccb7fcf010e8ee67c31d272433" prot="protected" static="no" mutable="no">
        <type>const DataType</type>
        <definition>const DataType Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" line="92" column="18" bodyfile="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4_1a8beabddb30e795b0247ddc04ae59dc0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;::Map</definition>
        <argsstring>(const Scalar *coeffs)</argsstring>
        <name>Map</name>
        <param>
          <type>const Scalar *</type>
          <declname>coeffs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" line="86" column="3" bodyfile="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4_1a4a182f6c560e51c49b5354e5b4b300f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const DataType &amp;</type>
        <definition>const DataType&amp; Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;::coeffs</definition>
        <argsstring>() const</argsstring>
        <name>coeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" line="88" column="19" bodyfile="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" bodystart="88" bodyend="88"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Specialization of Map for const <ref refid="structmanif_1_1_bundle" kindref="compound">manif::Bundle</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>manif::BundleBase&lt; Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_bundle_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>manif::LieGroupBase&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_lie_group_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</label>
        <link refid="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>manif::BundleBase&lt; Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt; &gt;</label>
        <link refid="structmanif_1_1_bundle_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>manif::LieGroupBase&lt; _Derived &gt;</label>
        <link refid="structmanif_1_1_lie_group_base"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" line="74" column="1" bodyfile="/home/runner/work/manif/manif/include/manif/impl/bundle/Bundle_map.h" bodystart="76" bodyend="93"/>
    <listofallmembers>
      <member refid="structmanif_1_1_lie_group_base_1a7fe44175f7ad70476c640d4745d7c6c9" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>_</name></member>
      <member refid="structmanif_1_1_bundle_base_1a9bd53241144cb3b48c11c401ee0d3d83" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>act</name></member>
      <member refid="structmanif_1_1_lie_group_base_1adc60eaf39fd497125f94e7b437f5d86f" prot="public" virt="non-virtual" ambiguityscope="manif::LieGroupBase::"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>act</name></member>
      <member refid="structmanif_1_1_bundle_base_1af45417ca14ef9419393e230c42003119" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>act_impl</name></member>
      <member refid="structmanif_1_1_bundle_base_1a2e18883af9d533e457d1414a4dae27b9" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>act_impl</name></member>
      <member refid="structmanif_1_1_bundle_base_1a1837554a8cd97811fac528abf0b538da" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>adj</name></member>
      <member refid="structmanif_1_1_bundle_base_1ab9821928a94cb2200cdaede69c422977" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>adj_impl</name></member>
      <member refid="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4_1a9d2a5fd2536440756ff792d576fc6909" prot="private" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Base</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7351c9a0e8fe51c72978626efa12d97c" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>between</name></member>
      <member refid="structmanif_1_1_bundle_base_1ac189bec928567bf86eb83a2f05e9341e" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>BundleSize</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ad0db8fc1317d2ea0f6f210a6b274ec88" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>cast</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a0ef0052589be75ef70ca7770cf73def7" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>cast</name></member>
      <member refid="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4_1a4a182f6c560e51c49b5354e5b4b300f3" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>coeffs</name></member>
      <member refid="structmanif_1_1_bundle_base_1a1ac9dd89b140080b8b0284c8bdfb5270" prot="public" virt="non-virtual" ambiguityscope="BundleBase&lt; Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt; &gt;::"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>coeffs</name></member>
      <member refid="structmanif_1_1_bundle_base_1a9263dbb22c4a6ef9906ec656624dbb8d" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>compose</name></member>
      <member refid="structmanif_1_1_bundle_base_1a7cc6d449ce8965be63ee012fced00dc9" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>compose_impl</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7d766d75afce68d88e7b83108b1bde3d" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>data</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a58250b5749c58fe57a7ecd14c4009dd0" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>data</name></member>
      <member refid="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4_1abefdb0ccb7fcf010e8ee67c31d272433" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>data_</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a59562d75de51334eab68426521a4e923" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>DataType</name></member>
      <member refid="structmanif_1_1_bundle_base_1a7ce9db9ccb753dbe014d050fad09c385" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>derived</name></member>
      <member refid="structmanif_1_1_bundle_base_1a9380b9ee1ed9bbdcf3dcf284571f6901" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>derived</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7ce9db9ccb753dbe014d050fad09c385" prot="protected" virt="non-virtual" ambiguityscope="manif::LieGroupBase::"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>derived</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a9380b9ee1ed9bbdcf3dcf284571f6901" prot="protected" virt="non-virtual" ambiguityscope="manif::LieGroupBase::"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>derived</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a42a00de7f4c6ae7e8a11568dfd4a43a8" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Dim</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a613898f9799c5317567b33a1fabe726e" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>DoF</name></member>
      <member refid="structmanif_1_1_bundle_base_1a2a199ef0d59e48fee2b54e298fb0ad46" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>element</name></member>
      <member refid="structmanif_1_1_bundle_base_1ad0e66bf0f8267313948a106cf1d4cc63" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>element</name></member>
      <member refid="structmanif_1_1_bundle_base_1a4428e1da3b83aeeda9f0ac45affc53dd" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>element</name></member>
      <member refid="structmanif_1_1_bundle_base_1a2eda243fd390a36cb13d391f0bca19a1" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>element</name></member>
      <member refid="structmanif_1_1_bundle_base_1a0f1b3301fcdd9f619c8ce0711f279eb7" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Element</name></member>
      <member refid="structmanif_1_1_bundle_base_1a41679b666399979a2e2eb2e309742fd0" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Elements</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a34a63b85f977cb40012be342f902404a" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Identity</name></member>
      <member refid="structmanif_1_1_bundle_base_1a8475edee4bdc7f4f4e2f21d2ec3ba31d" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>inverse</name></member>
      <member refid="structmanif_1_1_bundle_base_1a8645c8da6a58d8dd9fb946470f12623a" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>inverse_impl</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ac4d00c4834b1415eef9fb7a14dc8f708" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>isApprox</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ac02491bfe309ff4a384ca4394f153d6c" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Jacobian</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a1f015474f257f800bcd826787b26bcfc" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>LieGroup</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a536b5307a15fd40b0e5eb87c0344d6a8" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>LieGroupTemplate</name></member>
      <member refid="structmanif_1_1_bundle_base_1ae5c84d85c0c57a58c043be4773dbcd2e" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>lift</name></member>
      <member refid="structmanif_1_1_lie_group_base_1aef8d336d81a657e541e5ff48e5a08b1c" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>lminus</name></member>
      <member refid="structmanif_1_1_bundle_base_1a47c1741f0ab1ca52430a7a73289c120b" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>log</name></member>
      <member refid="structmanif_1_1_bundle_base_1a10320689917967479bbd17321778a7a9" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>log_impl</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ad6af777d6c8914c59ce88a76db6f4775" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>lplus</name></member>
      <member refid="class_eigen_1_1_map_3_01const_01manif_1_1_bundle_3_01___scalar_00_01_t_8_8_8_01_4_00_010_01_4_1a8beabddb30e795b0247ddc04ae59dc0f" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Map</name></member>
      <member refid="structmanif_1_1_bundle_base_1aeac25d8627b2b73205d5cc365cb3ebf6" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>MapConstElement</name></member>
      <member refid="structmanif_1_1_bundle_base_1abb2fa7d93e068d390767aacccd213591" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>MapElement</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a3912f9ef389576c9038ce2d544b4b833" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>minus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a4e49d3cf3538e03ff7d19c1602da19cc" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator*</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a019031c758bfb21a7030cd97843d4b4d" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator*=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a1a497184154ab95cc4cc4d14eb07c513" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator+</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a2a3e11651c59644d8f5f3705d0b257de" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator+=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1af59dd9dc829de8f8f49ecf4bee27fedd" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator-</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ac411dc1b8a4456a3bae4afd152abddaa" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ab3b5b3153e4d50982f9f71d104c8c37f" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a2b270c001e289786a499d76d886a5869" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator=</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a5d68ac830a6191abb32eccc874612bef" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator==</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7eb3084333fc8887e2fca17484eb8b81" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator[]</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ad6e624bd8270cec712a65f215d361b92" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>operator[]</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a9e323b97f09981a2b0d1973f8d81b21b" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>OptJacobianRef</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a74d5760f793fbfdeec248b34b3360d1c" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>plus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a0c1def597571453671f7762c4e511e05" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Random</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a229272dd86ff795a11848855b7072b20" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>RepSize</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ad6c5f9dc430ca6b0ff1eb5cc58c9faed" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>rminus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a2a36d6106e38cd7fac46510e6458a119" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>rplus</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a7215753f62eaeced0a3c8f53147938e3" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Scalar</name></member>
      <member refid="structmanif_1_1_lie_group_base_1aa154961cb80b013d3d1d66132e487f33" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>setIdentity</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a3d9dc0ea239fa48ca9d75d11e08e020d" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>setRandom</name></member>
      <member refid="structmanif_1_1_lie_group_base_1a87b9295ceffbca507f4a056a20260fc1" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>size</name></member>
      <member refid="structmanif_1_1_lie_group_base_1ab920e7e67b4e174ad7e291cd10945827" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Tangent</name></member>
      <member refid="structmanif_1_1_bundle_base_1a3deff81df5de215b87e8a78f94731217" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>transform</name></member>
      <member refid="structmanif_1_1_bundle_base_1a048d58d2653a980983572d255a0c55ca" prot="protected" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>transform_impl</name></member>
      <member refid="structmanif_1_1_bundle_base_1a8a84237087f300ccbe9ae79118f1eb65" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Transformation</name></member>
      <member refid="structmanif_1_1_lie_group_base_1aefcb523771afb5c59a70fb2d869598eb" prot="public" virt="non-virtual"><scope>Eigen::Map&lt; const manif::Bundle&lt; _Scalar, T... &gt;, 0 &gt;</scope><name>Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
